# -*- coding: utf-8 -*-
"""2.decision_tree.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KAPnwgiepkRzzUnSkMRfxFmaJbWYE6Z3
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.metrics import accuracy_score, confusion_matrix, ConfusionMatrixDisplay

df = pd.read_csv("/content/train.csv")

df.head()

df.info()

df.shape

df['Survived'].value_counts()

plt.figure(figsize=(6, 4))
sns.countplot(data=df, x='Survived')
plt.title("Survival Count (0 = No, 1 = Yes)")
plt.show()

plt.figure(figsize=(6, 4))
sns.histplot(data=df, x='Age', bins=30, kde=True)
plt.title("Age Distribution")
plt.show()

plt.figure(figsize=(6, 4))
sns.heatmap(df.corr(numeric_only=True), annot=True, cmap='coolwarm')
plt.title("Feature Correlation")
plt.show()

df = df.dropna(subset=['Age', 'Embarked'])

df['Sex'] = df['Sex'].map({'male': 0, 'female': 1})
df['Embarked'] = df['Embarked'].map({'C': 0, 'Q': 1, 'S': 2})

features = ['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']
X = df[features]
y = df['Survived']

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

model = DecisionTreeClassifier(max_depth=5, random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print("Decision Tree Accuracy on Titanic training data:", accuracy)

cm = confusion_matrix(y_test, y_pred)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=["Not Survived", "Survived"])
disp.plot(cmap='Blues')
plt.title("Confusion Matrix - Decision Tree")
plt.show()

plt.figure(figsize=(20, 8))
plot_tree(model, feature_names=features, class_names=["Not Survived", "Survived"], filled=True)
plt.title("Decision Tree Structure")
plt.show()

df_test = pd.read_csv("/content/test.csv")

df = df.dropna(subset=['Age', 'Embarked'])
df['Sex'] = df['Sex'].map({'male': 0, 'female': 1})
df['Embarked'] = df['Embarked'].map({'C': 0, 'Q': 1, 'S': 2})

features = ['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']
X_train = df[features]
y_train = df['Survived']

df_test['Age'] = df_test['Age'].fillna(df_test['Age'].median())
df_test['Fare'] = df_test['Fare'].fillna(df_test['Fare'].median())
df_test['Embarked'] = df_test['Embarked'].fillna(df_test['Embarked'].mode()[0])


X_test = df_test[features]

model = DecisionTreeClassifier(max_depth=5, random_state=42)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

output = pd.DataFrame({
    'PassengerId': df_test['PassengerId'],
    'Survived': y_pred
})
output.to_csv('predicted_submission.csv', index=False)
print("Predictions saved to predicted_submission.csv")

df_pred = pd.read_csv("/content/predicted_submission.csv")
df_actual = pd.read_csv("/content/gender_submission (1).csv")

if not df_pred['PassengerId'].equals(df_actual['PassengerId']):
    print("Passenger IDs do not match. Cannot compare accurately.")
else:

    y_pred = df_pred['Survived']
    y_true = df_actual['Survived']

    accuracy = accuracy_score(y_true, y_pred)
    print("Accuracy on test set (vs. gender_submission):", accuracy)

cm = confusion_matrix(y_true, y_pred)
disp = ConfusionMatrixDisplay(confusion_matrix=cm,display_labels=["Not Survived", "Survived"])
disp.plot(cmap='Greens')
plt.title("Confusion Matrix - Test Set Evaluation")
plt.show()